package ru.base.web;

import java.net.MalformedURLException;
import java.security.Principal;
import java.util.Base64;
import java.util.Collections;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.view.RedirectView;

import ru.base.AuthorizedUser;
import ru.base.service.UserService;
import ru.base.service.UserServiceImpl;

@CrossOrigin(origins = "http://localhost:4200")
@Controller
public class RootController {
    @Autowired
    private UserService userService;

    @GetMapping(value = "/login")
    public String login(ModelMap model,
                        @RequestParam(value = "error", required = false) boolean error,
                        @RequestParam(value = "message", required = false) String message) {
        model.put("error", error);
        model.put("message", message);
        return "login";
    } 

    //@Secured("ROLE_ADMIN")
    //@PreAuthorize("hasRole('ROLE_ADMIN')")
     @GetMapping("/")
    public RedirectView getUsers(HttpServletRequest request) throws MalformedURLException {
        return new RedirectView("index.html");
    } 
    
    
    @PostMapping("/login")
    @ResponseBody
    public AuthorizedUser authUser(HttpServletRequest request) {
        
        var email = request.getHeader("email");
        var str = new String(Base64.getDecoder().decode(request.getHeader("authorization").split(" ")[1].getBytes()));
        var authorizedUser = ((UserServiceImpl)userService).loadUserByUsername(email);
        
        return authorizedUser;
    }



    @GetMapping("/user")
    @ResponseBody
    public AuthorizedUser user(HttpServletRequest request) {
        
        var email = request.getHeader("email");
        var str = new String(Base64.getDecoder().decode(request.getHeader("authorization").split(" ")[1].getBytes()));
        var authorizedUser = ((UserServiceImpl)userService).loadUserByUsername(email);
        
        return authorizedUser;
    }


    @GetMapping("/token")
    @ResponseBody
    public Map<String, String> token(HttpSession session) {
        return Collections.singletonMap("token", session.getId());
    }

}